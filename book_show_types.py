#!/usr/bin/env python3

"""
Game of Thrones chapters vs episodes chart generator
Copyright (c) 2013-2018, Joel Geddert

This script generates an HTML file of the table.

Software License:
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

A note from the author:
	The original chart generated by this code, as well as all remaining applicable
	source & asset files (except where noted), are licensed under a Creative Commons
	BY-SA 4.0 license <http://creativecommons.org/licenses/by-sa/4.0/>. If you are
	going to use any of this code to create a derivative work, please respect this
	CC license.
"""


from typing import List


class Chapter:
	def __init__(self, book: str, book_num: int, number: int, tot_chap_num: int, name: str, pov_char: str, storyline: List[str], location: str, occurred: str):
		self.book = book
		self.book_num = book_num
		self.number = number
		self.tot_chap_num = tot_chap_num
		self.name = name
		self.pov = pov_char
		self.storyline = storyline
		self.location = location
		self.occurred = occurred

	def __str__(self):
		return '"%s", chapter %i' % (self.name, self.tot_chap_num)

	def __repr__(self):
		# TODO: add more details (repr should show all data)
		return 'Chapter(%s)' % str(self)


class Episode:
	def __init__(self, season: int, name: str):
		self.season = season
		self.name = name

	def __str__(self):
		return '"%s", season %i' % (self.name, self.season)

	def __repr__(self):
		return 'Episode(%s)' % str(self)


class Connection:
	def __init__(self, ep_num: int, book_num: int, chap_name: str, chap_num: int, strength: int, major: bool, notes: str):
		self.ep_num = ep_num
		self.book_num = book_num
		self.chap_name = chap_name
		self.tot_chap_num = chap_num
		self.strength = strength
		self.major = major
		self.notes = notes

	def __str__(self):
		return 'Episode %i, Chapter %i' % (self.ep_num, self.tot_chap_num)

	def __repr__(self):
		# TODO: add more details (repr should show all data)
		return 'Connection(%s)' % str(self)


class DB:
	def __init__(self):
		self.books = []
		self.chapters = []
		self.chapters_interleaved = []
		self.chapters_per_book = []
		self.book_chap_offset = []

		self.episodes = []
		self.num_seasons = 0

		self.connections = []

	def find_chapter(self, chap_name, book_num):
		chapters = [item for item in self.chapters if (item.book_num == book_num) and (item.name == chap_name)]

		if len(chapters) == 0:
			return None

		if len(chapters) > 1:
			print("WARNING: multiple chapters found matching book #", book_num, "named", chap_name)

		return chapters[0]

	def find_chapter_by_number(self, book_num, chap_num):
		chapters = [item for item in self.chapters if (item['bookNum'] == book_num) and (item['chapNum'] == chap_num)]

		if len(chapters) == 0:
			return None

		if len(chapters) > 1:
			print("WARNING: multiple chapters found matching book #", book_num, " chap#", chap_num, sep="")

		return chapters[0]
