#!/usr/bin/env python3

"""
Game of Thrones chapters vs episodes chart generator
Copyright (c) 2013-2018, Joel Geddert

This script generates an HTML file of the table.

Software License:
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

A note from the author:
	The original chart generated by this code, as well as all remaining applicable
	source & asset files (except where noted), are licensed under a Creative Commons
	BY-SA 4.0 license <http://creativecommons.org/licenses/by-sa/4.0/>. If you are
	going to use any of this code to create a derivative work, please respect this
	CC license.
"""


from utils import *
from book_show_types import *
import os.path
import csv


_chapterFilename = os.path.join('input', 'chapters.csv')
_combinedFilename = os.path.join('input', 'combined.txt')
_episodeFilename = os.path.join('input', 'episodes.csv')
_connectionsFilename = os.path.join('input', 'connections.csv')

_tab = "\t"


def parse_chapters():
	print("Processing", _chapterFilename)
	chapter_list = []
	book_list = []
	book_num_chap = []
	total_chap_num = 0
	with open(_chapterFilename) as csvFile:
		chapterfile = csv.reader(csvFile)
		bookname = ""
		book_num = 0
		for row in chapterfile:
			prevbookname = bookname
			bookname = row[0]
			if bookname != "":
				chapNum = int(row[1])
				chapName = row[2]
				povchar = row[3]
				if povchar == '':
					# if no POV char given in CSV file, use first word of chapter name
					povchar = row[2].split()[0]
					if povchar[0:3].lower() in ["pro", "epi"]:
						# If it's a prologue/epilogue then always make it "other"
						povchar = "Other"
					elif povchar[0:3].lower() == "the":
						# IF it's a "the" chapter, there should be a pov char set!
						print("WARNING: no POV char given for chapter " + chapName)
						povchar = "Other"
				location = row[4]
				storyline = [row[5].lower()]
				if (row[6] != ""):
					storyline.append(row[6].lower())
				occurred = row[7]
				if bookname not in book_list:
					book_list.append(bookname)
					book_num += 1
					book_num_chap.append(1)
				else:
					book_num_chap[book_num - 1] += 1

				total_chap_num += 1

				chapter_list.append(Chapter(
					name=chapName,
					pov_char=povchar,
					number=chapNum,
					book=bookname,
					book_num=book_num,
					tot_chap_num=total_chap_num,
					storyline=storyline,
					location=location,
					occurred=occurred,
				))

	debug_print(repr(chapter_list[0:10]))

	return chapter_list, book_list, book_num_chap


def parse_combined_order(chapter_list, book_chap_offset):
	print("Processing", _combinedFilename)
	combined_chapter_list = []
	with open(_combinedFilename, 'rU') as txtFile:
		line = txtFile.readline()
		while line:

			words = line.split()
			words = [word.lower() for word in words]

			book_num = 0

			if 'affc' in words:
				book_num = 4
				n = words.index('affc')
			elif 'adwd' in words:
				book_num = 5
				n = words.index('adwd')
			else:
				print("ERROR: neither AFFC nor ADWD not found in line:")
				print(line)
				line = txtFile.readline()
				continue

			# combined.txt 1-indexes chapters
			chapNum = int(words[n + 1]) - 1

			chapter = chapter_list[chapNum + book_chap_offset[book_num - 1]]
			combined_chapter_list.append(chapter)

			debug_print(chapter)
			debug_print(line)

			line = txtFile.readline()
	return combined_chapter_list


def parse_episodes():
	print("Processing", _episodeFilename)
	episodeList = []
	with open(_episodeFilename) as csvFile:
		episodeFile = csv.reader(csvFile)
		for row in episodeFile:
			season = row[0]
			if season != "":
				epname = row[3]
				epname = epname[1:-1]
				debug_print(epname)
				episodeList.append(Episode(season=season, name=epname))
	return episodeList


def parse_connections(db):
	print("Processing", _connectionsFilename)
	connList = []
	with open(_connectionsFilename) as csvFile:
		connectionfile = csv.reader(csvFile)
		for row in connectionfile:
			if row[0].isdigit():
				ep_num = int(row[1]) + 10 * (int(row[0]) - 1)
				book_num = int(row[2])
				chap_name = row[3]
				strength = row[4]
				major = row[5]
				notes = row[6]

				if (chap_name == '') or (chap_name == '?'):
					continue

				if strength not in ['0', '1']:
					print("WARNING: chapter strength not 0 or 1")
					print(_tab, "book ", book_num, " chap_name ", chap_name, sep="")
					print(_tab, "strength: ", strength, sep="")
					continue
				strength = int(strength)

				# Make sure chapter name is in the list of chapters!
				chapter = db.find_chapter(chap_name, book_num)

				if not chapter:
					print("WARNING: Chapter not found:")
					print(_tab, "book ", book_num, " chap_name ", chap_name, sep="")
					print(_tab, "notes: ", notes, sep="")

				# This line causes it to crash when the chapter is incorrectly named (which is okay!)
				chap_num = int(chapter.number) + 1 + sum(db.chapters_per_book[0:book_num - 1])

				debug_print("chap_name:", chap_name, "chap_num:", chap_num)

				connList.append(Connection(
					ep_num=ep_num,
					book_num=book_num,
					chap_name=chap_name,
					chap_num=chap_num,
					strength=strength,
					major=major,
					notes=notes,
				))

	debug_print(repr(connList[0:10]))

	return connList


def do_parsing() -> DB:

	db = DB()

	db.chapters, db.books, db.chapters_per_book = parse_chapters()

	db.book_chap_offset = cumsum(db.chapters_per_book)

	#prepend 0 to start
	db.book_chap_offset[:0] = [0]

	print("")
	print(len(db.chapters), "chapters in", len(db.books), "books:")
	for n in range(len(db.books)):
		print(n+1, db.books[n], '-', db.chapters_per_book[n], 'chapters, first chapter is', db.book_chap_offset[n]+1, 'overall')
	print("")

	combined_chapter_list = parse_combined_order(db.chapters, db.book_chap_offset)

	print(len(combined_chapter_list), "chapters in books 4+5")

	# Have to use list(), otherwise it just copies reference and that's bad
	db.chapters_interleaved = list(db.chapters)
	# Insert combined chapter list into g_chapter_list
	db.chapters_interleaved[db.book_chap_offset[5]:db.book_chap_offset[5]] = combined_chapter_list

	for chapter in db.chapters_interleaved:
		debug_print(repr(chapter))

	print("")

	db.episodes = parse_episodes()
	print("%i episodes" % len(db.episodes))

	print("")

	db.connections = parse_connections(db)
	print("%i episode-chapter connections" % len(db.connections))

	return db
